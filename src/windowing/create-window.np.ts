// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter, type NanoPackMessage } from "nanopack"

class CreateWindow implements NanoPackMessage {
	public static TYPE_ID = 3533765426

	public readonly typeId: number = 3533765426

	public readonly headerSize: number = 24

	constructor(
		public title: string,
		public description: string,
		public width: number,
		public height: number,
		public tag: string,
	) {}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: CreateWindow } | null {
		const reader = new NanoBufReader(bytes)
		return CreateWindow.fromReader(reader)
	}

	public static fromReader(
		reader: NanoBufReader,
	): { bytesRead: number; result: CreateWindow } | null {
		let ptr = 24

		const titleByteLength = reader.readFieldSize(0)
		const title = reader.readString(ptr, titleByteLength)
		ptr += titleByteLength

		const descriptionByteLength = reader.readFieldSize(1)
		const description = reader.readString(ptr, descriptionByteLength)
		ptr += descriptionByteLength

		const width = reader.readInt32(ptr)
		ptr += 4

		const height = reader.readInt32(ptr)
		ptr += 4

		const tagByteLength = reader.readFieldSize(4)
		const tag = reader.readString(ptr, tagByteLength)
		ptr += tagByteLength

		return {
			bytesRead: ptr,
			result: new CreateWindow(title, description, width, height, tag),
		}
	}

	public writeTo(writer: NanoBufWriter, offset: number = 0): number {
		let bytesWritten = 24

		writer.writeTypeId(3533765426, offset)

		const titleByteLength = writer.appendString(this.title)
		writer.writeFieldSize(0, titleByteLength, offset)
		bytesWritten += titleByteLength

		const descriptionByteLength = writer.appendString(this.description)
		writer.writeFieldSize(1, descriptionByteLength, offset)
		bytesWritten += descriptionByteLength

		writer.appendInt32(this.width)
		writer.writeFieldSize(2, 4, offset)
		bytesWritten += 4

		writer.appendInt32(this.height)
		writer.writeFieldSize(3, 4, offset)
		bytesWritten += 4

		const tagByteLength = writer.appendString(this.tag)
		writer.writeFieldSize(4, tagByteLength, offset)
		bytesWritten += tagByteLength

		return bytesWritten
	}

	public bytes(): Uint8Array {
		const writer = new NanoBufWriter(24)
		this.writeTo(writer)
		return writer.bytes
	}
}

export { CreateWindow }
