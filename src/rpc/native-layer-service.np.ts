// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufWriter } from "nanopack";
import {
  RpcServer,
  RpcClient,
  RpcMessageType,
  type RpcServerChannel,
} from "nanopack/rpc";

import { Widget } from "./widget/widget.np.js";
import { makeWidget } from "./widget/make-widget.np.js";
import type { NanoPackMessage } from "nanopack";
import { makeNanoPackMessage } from "./message-factory.np.js";

interface INativeLayerService {
  createWindow(
    title: string,
    description: string,
    width: number,
    height: number,
    tag: string,
  ): void;
  createWidget(widget: Widget, windowTag: string): void;
  appendNewWidget(child: Widget, parentTag: number): void;
  updateWidget(tag: number, widget: Widget, args: NanoPackMessage | null): void;
  updateWidgets(
    tag: number[],
    widgets: Widget[],
    args: NanoPackMessage | null,
  ): void;
  removeWidget(tag: number): void;
  insertWidgetBefore(
    widget: Widget,
    beforeWidget: Widget,
    parentTag: number,
  ): void;
  clearWindow(windowTag: string): void;
}

class NativeLayerServiceServer extends RpcServer {
  constructor(
    channel: RpcServerChannel,
    private impl: INativeLayerService,
  ) {
    super(channel);
    this.on("create_window", (reader, offset, msgId) => {
      let ptr = offset;
      const titleByteLength = reader.readInt32(ptr);
      ptr += 4;
      const title = reader.readString(ptr, titleByteLength);
      ptr += titleByteLength;
      const descriptionByteLength = reader.readInt32(ptr);
      ptr += 4;
      const description = reader.readString(ptr, descriptionByteLength);
      ptr += descriptionByteLength;
      const width = reader.readInt32(ptr);
      ptr += 4;
      const height = reader.readInt32(ptr);
      ptr += 4;
      const tagByteLength = reader.readInt32(ptr);
      ptr += 4;
      const tag = reader.readString(ptr, tagByteLength);
      ptr += tagByteLength;

      this.impl.createWindow(title, description, width, height, tag);
      const writer = new NanoBufWriter(6, false);
      writer.appendUint8(RpcMessageType.RESPONSE);
      writer.appendUint32(msgId);
      writer.appendUint8(0);

      return writer;
    });
    this.on("create_widget", (reader, offset, msgId) => {
      let ptr = offset;
      const maybeWidget = makeWidget(reader, ptr);
      if (!maybeWidget) {
        return null;
      }
      const widget = maybeWidget.result;
      ptr += maybeWidget.bytesRead;
      const windowTagByteLength = reader.readInt32(ptr);
      ptr += 4;
      const windowTag = reader.readString(ptr, windowTagByteLength);
      ptr += windowTagByteLength;

      this.impl.createWidget(widget, windowTag);
      const writer = new NanoBufWriter(6, false);
      writer.appendUint8(RpcMessageType.RESPONSE);
      writer.appendUint32(msgId);
      writer.appendUint8(0);

      return writer;
    });
    this.on("append_new_widget", (reader, offset, msgId) => {
      let ptr = offset;
      const maybeChild = makeWidget(reader, ptr);
      if (!maybeChild) {
        return null;
      }
      const child = maybeChild.result;
      ptr += maybeChild.bytesRead;
      const parentTag = reader.readUint32(ptr);
      ptr += 4;

      this.impl.appendNewWidget(child, parentTag);
      const writer = new NanoBufWriter(6, false);
      writer.appendUint8(RpcMessageType.RESPONSE);
      writer.appendUint32(msgId);
      writer.appendUint8(0);

      return writer;
    });
    this.on("update_widget", (reader, offset, msgId) => {
      let ptr = offset;
      const tag = reader.readUint32(ptr);
      ptr += 4;
      const maybeWidget = makeWidget(reader, ptr);
      if (!maybeWidget) {
        return null;
      }
      const widget = maybeWidget.result;
      ptr += maybeWidget.bytesRead;
      let args: NanoPackMessage | null;
      if (reader.readBoolean(ptr++)) {
        const maybeArgs = makeNanoPackMessage(reader, ptr);
        if (!maybeArgs) {
          return null;
        }
        args = maybeArgs.result;
        ptr += maybeArgs.bytesRead;
      } else {
        args = null;
      }

      this.impl.updateWidget(tag, widget, args);
      const writer = new NanoBufWriter(6, false);
      writer.appendUint8(RpcMessageType.RESPONSE);
      writer.appendUint32(msgId);
      writer.appendUint8(0);

      return writer;
    });
    this.on("update_widgets", (reader, offset, msgId) => {
      let ptr = offset;
      const tagLength = reader.readInt32(ptr);
      ptr += 4;
      const tag: number[] = new Array(tagLength);
      for (let i = 0; i < tagLength; i++) {
        const iItem = reader.readUint32(ptr);
        ptr += 4;
        tag[i] = iItem;
      }
      const widgetsLength = reader.readInt32(ptr);
      ptr += 4;
      const widgets: Widget[] = new Array(widgetsLength);
      for (let i = 0; i < widgetsLength; i++) {
        const maybeIItem = makeWidget(reader, ptr);
        if (!maybeIItem) {
          return null;
        }
        const iItem = maybeIItem.result;
        ptr += maybeIItem.bytesRead;
        widgets[i] = iItem;
      }
      let args: NanoPackMessage | null;
      if (reader.readBoolean(ptr++)) {
        const maybeArgs = makeNanoPackMessage(reader, ptr);
        if (!maybeArgs) {
          return null;
        }
        args = maybeArgs.result;
        ptr += maybeArgs.bytesRead;
      } else {
        args = null;
      }

      this.impl.updateWidgets(tag, widgets, args);
      const writer = new NanoBufWriter(6, false);
      writer.appendUint8(RpcMessageType.RESPONSE);
      writer.appendUint32(msgId);
      writer.appendUint8(0);

      return writer;
    });
    this.on("remove_widget", (reader, offset, msgId) => {
      let ptr = offset;
      const tag = reader.readUint32(ptr);
      ptr += 4;

      this.impl.removeWidget(tag);
      const writer = new NanoBufWriter(6, false);
      writer.appendUint8(RpcMessageType.RESPONSE);
      writer.appendUint32(msgId);
      writer.appendUint8(0);

      return writer;
    });
    this.on("insert_widget_before", (reader, offset, msgId) => {
      let ptr = offset;
      const maybeWidget = makeWidget(reader, ptr);
      if (!maybeWidget) {
        return null;
      }
      const widget = maybeWidget.result;
      ptr += maybeWidget.bytesRead;
      const maybeBeforeWidget = makeWidget(reader, ptr);
      if (!maybeBeforeWidget) {
        return null;
      }
      const beforeWidget = maybeBeforeWidget.result;
      ptr += maybeBeforeWidget.bytesRead;
      const parentTag = reader.readUint32(ptr);
      ptr += 4;

      this.impl.insertWidgetBefore(widget, beforeWidget, parentTag);
      const writer = new NanoBufWriter(6, false);
      writer.appendUint8(RpcMessageType.RESPONSE);
      writer.appendUint32(msgId);
      writer.appendUint8(0);

      return writer;
    });
    this.on("clear_window", (reader, offset, msgId) => {
      let ptr = offset;
      const windowTagByteLength = reader.readInt32(ptr);
      ptr += 4;
      const windowTag = reader.readString(ptr, windowTagByteLength);
      ptr += windowTagByteLength;

      this.impl.clearWindow(windowTag);
      const writer = new NanoBufWriter(6, false);
      writer.appendUint8(RpcMessageType.RESPONSE);
      writer.appendUint32(msgId);
      writer.appendUint8(0);

      return writer;
    });
  }
}

class NativeLayerServiceClient extends RpcClient {
  async createWindow(
    title: string,
    description: string,
    width: number,
    height: number,
    tag: string,
  ): Promise<void> {
    const writer = new NanoBufWriter(9 + 13, false);
    const msgId = this.newMessageId();
    writer.appendUint8(RpcMessageType.REQUEST);
    writer.appendUint32(msgId);
    writer.appendStringAndSize("create_window");
    const titleByteLength = writer.appendStringAndSize(title);
    const descriptionByteLength = writer.appendStringAndSize(description);
    writer.appendInt32(width);
    writer.appendInt32(height);
    const tagByteLength = writer.appendStringAndSize(tag);

    const reader = await this.sendRequestData(msgId, writer.bytes);
    let ptr = 5;
    const errFlag = reader.readUint8(ptr++);
    if (errFlag) {
      throw new Error("error");
    }
  }
  async createWidget(widget: Widget, windowTag: string): Promise<void> {
    const writer = new NanoBufWriter(9 + 13, false);
    const msgId = this.newMessageId();
    writer.appendUint8(RpcMessageType.REQUEST);
    writer.appendUint32(msgId);
    writer.appendStringAndSize("create_widget");
    const widgetWriteOffset = writer.currentSize;
    writer.reserveHeader(widget.headerSize);
    const widgetByteSize = widget.writeTo(writer, widgetWriteOffset);
    const windowTagByteLength = writer.appendStringAndSize(windowTag);

    const reader = await this.sendRequestData(msgId, writer.bytes);
    let ptr = 5;
    const errFlag = reader.readUint8(ptr++);
    if (errFlag) {
      throw new Error("error");
    }
  }
  async appendNewWidget(child: Widget, parentTag: number): Promise<void> {
    const writer = new NanoBufWriter(9 + 17, false);
    const msgId = this.newMessageId();
    writer.appendUint8(RpcMessageType.REQUEST);
    writer.appendUint32(msgId);
    writer.appendStringAndSize("append_new_widget");
    const childWriteOffset = writer.currentSize;
    writer.reserveHeader(child.headerSize);
    const childByteSize = child.writeTo(writer, childWriteOffset);
    writer.appendUint32(parentTag);

    const reader = await this.sendRequestData(msgId, writer.bytes);
    let ptr = 5;
    const errFlag = reader.readUint8(ptr++);
    if (errFlag) {
      throw new Error("error");
    }
  }
  async updateWidget(
    tag: number,
    widget: Widget,
    args: NanoPackMessage | null,
  ): Promise<void> {
    const writer = new NanoBufWriter(9 + 13, false);
    const msgId = this.newMessageId();
    writer.appendUint8(RpcMessageType.REQUEST);
    writer.appendUint32(msgId);
    writer.appendStringAndSize("update_widget");
    writer.appendUint32(tag);
    const widgetWriteOffset = writer.currentSize;
    writer.reserveHeader(widget.headerSize);
    const widgetByteSize = widget.writeTo(writer, widgetWriteOffset);
    if (args) {
      writer.appendBoolean(true);
      const argsWriteOffset = writer.currentSize;
      writer.reserveHeader(args.headerSize);
      const argsByteSize = args.writeTo(writer, argsWriteOffset);
    } else {
      writer.appendBoolean(false);
    }

    const reader = await this.sendRequestData(msgId, writer.bytes);
    let ptr = 5;
    const errFlag = reader.readUint8(ptr++);
    if (errFlag) {
      throw new Error("error");
    }
  }
  async updateWidgets(
    tag: number[],
    widgets: Widget[],
    args: NanoPackMessage | null,
  ): Promise<void> {
    const writer = new NanoBufWriter(9 + 14, false);
    const msgId = this.newMessageId();
    writer.appendUint8(RpcMessageType.REQUEST);
    writer.appendUint32(msgId);
    writer.appendStringAndSize("update_widgets");
    writer.appendInt32(tag.length);
    for (const iItem of tag) {
      writer.appendUint32(iItem);
    }
    writer.appendInt32(widgets.length);
    let widgetsByteLength = 4;
    for (const iItem of widgets) {
      const iItemWriteOffset = writer.currentSize;
      writer.reserveHeader(iItem.headerSize);
      const iItemByteSize = iItem.writeTo(writer, iItemWriteOffset);
      widgetsByteLength += iItemByteSize;
    }
    if (args) {
      writer.appendBoolean(true);
      const argsWriteOffset = writer.currentSize;
      writer.reserveHeader(args.headerSize);
      const argsByteSize = args.writeTo(writer, argsWriteOffset);
    } else {
      writer.appendBoolean(false);
    }

    const reader = await this.sendRequestData(msgId, writer.bytes);
    let ptr = 5;
    const errFlag = reader.readUint8(ptr++);
    if (errFlag) {
      throw new Error("error");
    }
  }
  async removeWidget(tag: number): Promise<void> {
    const writer = new NanoBufWriter(9 + 13 + 4, false);
    const msgId = this.newMessageId();
    writer.appendUint8(RpcMessageType.REQUEST);
    writer.appendUint32(msgId);
    writer.appendStringAndSize("remove_widget");
    writer.appendUint32(tag);

    const reader = await this.sendRequestData(msgId, writer.bytes);
    let ptr = 5;
    const errFlag = reader.readUint8(ptr++);
    if (errFlag) {
      throw new Error("error");
    }
  }
  async insertWidgetBefore(
    widget: Widget,
    beforeWidget: Widget,
    parentTag: number,
  ): Promise<void> {
    const writer = new NanoBufWriter(9 + 20, false);
    const msgId = this.newMessageId();
    writer.appendUint8(RpcMessageType.REQUEST);
    writer.appendUint32(msgId);
    writer.appendStringAndSize("insert_widget_before");
    const widgetWriteOffset = writer.currentSize;
    writer.reserveHeader(widget.headerSize);
    const widgetByteSize = widget.writeTo(writer, widgetWriteOffset);
    const beforeWidgetWriteOffset = writer.currentSize;
    writer.reserveHeader(beforeWidget.headerSize);
    const beforeWidgetByteSize = beforeWidget.writeTo(
      writer,
      beforeWidgetWriteOffset,
    );
    writer.appendUint32(parentTag);

    const reader = await this.sendRequestData(msgId, writer.bytes);
    let ptr = 5;
    const errFlag = reader.readUint8(ptr++);
    if (errFlag) {
      throw new Error("error");
    }
  }
  async clearWindow(windowTag: string): Promise<void> {
    const writer = new NanoBufWriter(9 + 12, false);
    const msgId = this.newMessageId();
    writer.appendUint8(RpcMessageType.REQUEST);
    writer.appendUint32(msgId);
    writer.appendStringAndSize("clear_window");
    const windowTagByteLength = writer.appendStringAndSize(windowTag);

    const reader = await this.sendRequestData(msgId, writer.bytes);
    let ptr = 5;
    const errFlag = reader.readUint8(ptr++);
    if (errFlag) {
      throw new Error("error");
    }
  }
}

export { NativeLayerServiceServer, NativeLayerServiceClient };
export type { INativeLayerService };
