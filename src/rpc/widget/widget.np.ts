// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter, type NanoPackMessage } from "nanopack";

class Widget implements NanoPackMessage {
  public static TYPE_ID = 1676374721;

  public readonly typeId: number = 1676374721;

  public readonly headerSize: number = 8;

  constructor(public tag: number | null) {}

  public static fromBytes(
    bytes: Buffer,
  ): { bytesRead: number; result: Widget } | null {
    const reader = new NanoBufReader(bytes);
    return Widget.fromReader(reader);
  }

  public static fromReader(
    reader: NanoBufReader,
    offset = 0,
  ): { bytesRead: number; result: Widget } | null {
    let ptr = offset + 8;

    let tag: number | null;
    if (reader.readFieldSize(0, offset) >= 0) {
      tag = reader.readUint32(ptr);
      ptr += 4;
    } else {
      tag = null;
    }

    return { bytesRead: ptr - offset, result: new Widget(tag) };
  }

  public writeTo(writer: NanoBufWriter, offset = 0): number {
    let bytesWritten = 8;

    writer.writeTypeId(1676374721, offset);

    if (this.tag) {
      writer.appendUint32(this.tag);
      writer.writeFieldSize(0, 4, offset);
      bytesWritten += 4;
    } else {
      writer.writeFieldSize(0, -1, offset);
    }

    return bytesWritten;
  }

  public bytes(): Uint8Array {
    const writer = new NanoBufWriter(8);
    this.writeTo(writer);
    return writer.bytes;
  }
}

export { Widget };
