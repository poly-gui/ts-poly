// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter } from "nanopack";

import { Widget } from "./widget.np.js";
import { makeWidget } from "./make-widget.np.js";

class Slider extends Widget {
  public static TYPE_ID = 3373588321;

  public override readonly typeId: number = 3373588321;

  public override readonly headerSize: number = 28;

  constructor(
    public tag: number | null,
    public value: number,
    public minValue: number,
    public maxValue: number,
    public onValueChanged: number,
    public width: number,
  ) {
    super(tag);
  }

  public static fromBytes(
    bytes: Buffer,
  ): { bytesRead: number; result: Slider } | null {
    const reader = new NanoBufReader(bytes);
    return Slider.fromReader(reader);
  }

  public static fromReader(
    reader: NanoBufReader,
    offset = 0,
  ): { bytesRead: number; result: Slider } | null {
    let ptr = offset + 28;

    let tag: number | null;
    if (reader.readFieldSize(0, offset) >= 0) {
      tag = reader.readUint32(ptr);
      ptr += 4;
    } else {
      tag = null;
    }

    const value = reader.readDouble(ptr);
    ptr += 8;

    const minValue = reader.readDouble(ptr);
    ptr += 8;

    const maxValue = reader.readDouble(ptr);
    ptr += 8;

    const onValueChanged = reader.readUint32(ptr);
    ptr += 4;

    const width = reader.readDouble(ptr);
    ptr += 8;

    return {
      bytesRead: ptr - offset,
      result: new Slider(tag, value, minValue, maxValue, onValueChanged, width),
    };
  }

  public override writeTo(writer: NanoBufWriter, offset = 0): number {
    let bytesWritten = 28;

    writer.writeTypeId(3373588321, offset);

    if (this.tag) {
      writer.appendUint32(this.tag);
      writer.writeFieldSize(0, 4, offset);
      bytesWritten += 4;
    } else {
      writer.writeFieldSize(0, -1, offset);
    }

    writer.appendDouble(this.value);
    writer.writeFieldSize(1, 8, offset);
    bytesWritten += 8;

    writer.appendDouble(this.minValue);
    writer.writeFieldSize(2, 8, offset);
    bytesWritten += 8;

    writer.appendDouble(this.maxValue);
    writer.writeFieldSize(3, 8, offset);
    bytesWritten += 8;

    writer.appendUint32(this.onValueChanged);
    writer.writeFieldSize(4, 4, offset);
    bytesWritten += 4;

    writer.appendDouble(this.width);
    writer.writeFieldSize(5, 8, offset);
    bytesWritten += 8;

    return bytesWritten;
  }

  public override bytes(): Uint8Array {
    const writer = new NanoBufWriter(28);
    this.writeTo(writer);
    return writer.bytes;
  }
}

export { Slider };
