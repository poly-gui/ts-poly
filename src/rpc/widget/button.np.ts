// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter } from "nanopack";

import { Widget } from "./widget.np.js";
import { makeWidget } from "./make-widget.np.js";

class Button extends Widget {
  public static TYPE_ID = 320412644;

  public override readonly typeId: number = 320412644;

  public override readonly headerSize: number = 16;

  constructor(
    public tag: number | null,
    public text: string,
    public onClick: number,
  ) {
    super(tag);
  }

  public static fromBytes(
    bytes: Buffer,
  ): { bytesRead: number; result: Button } | null {
    const reader = new NanoBufReader(bytes);
    return Button.fromReader(reader);
  }

  public static fromReader(
    reader: NanoBufReader,
    offset = 0,
  ): { bytesRead: number; result: Button } | null {
    let ptr = offset + 16;

    let tag: number | null;
    if (reader.readFieldSize(0, offset) >= 0) {
      tag = reader.readInt32(ptr);
      ptr += 4;
    } else {
      tag = null;
    }

    const textByteLength = reader.readFieldSize(1, offset);
    const text = reader.readString(ptr, textByteLength);
    ptr += textByteLength;

    const onClick = reader.readUint32(ptr);
    ptr += 4;

    return { bytesRead: ptr - offset, result: new Button(tag, text, onClick) };
  }

  public override writeTo(writer: NanoBufWriter, offset = 0): number {
    let bytesWritten = 16;

    writer.writeTypeId(320412644, offset);

    if (this.tag) {
      writer.appendInt32(this.tag);
      writer.writeFieldSize(0, 4, offset);
      bytesWritten += 4;
    } else {
      writer.writeFieldSize(0, -1, offset);
    }

    const textByteLength = writer.appendString(this.text);
    writer.writeFieldSize(1, textByteLength, offset);
    bytesWritten += textByteLength;

    writer.appendUint32(this.onClick);
    writer.writeFieldSize(2, 4, offset);
    bytesWritten += 4;

    return bytesWritten;
  }

  public override bytes(): Uint8Array {
    const writer = new NanoBufWriter(16);
    this.writeTo(writer);
    return writer.bytes;
  }
}

export { Button };
