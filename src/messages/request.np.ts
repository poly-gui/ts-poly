// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import { NanoBufReader, NanoBufWriter, type NanoPackMessage } from "nanopack"

class Request implements NanoPackMessage {
	public static TYPE_ID = 879254966

	constructor(
		public id: number,
		public body: NanoBufReader,
	) {}

	public static fromBytes(
		bytes: Uint8Array,
	): { bytesRead: number; result: Request } | null {
		const reader = new NanoBufReader(bytes)
		return Request.fromReader(reader)
	}

	public static fromReader(
		reader: NanoBufReader,
	): { bytesRead: number; result: Request } | null {
		let ptr = 12

		const id = reader.readUint32(ptr)
		ptr += 4

		const bodyByteLength = reader.readFieldSize(1)
		const body = reader.newReaderAt(ptr, ptr + bodyByteLength)
		ptr += bodyByteLength

		return { bytesRead: ptr, result: new Request(id, body) }
	}

	public get typeId(): number {
		return 879254966
	}

	public bytes(): Uint8Array {
		const writer = new NanoBufWriter(12)
		writer.writeTypeId(879254966)

		writer.appendUint32(this.id)
		writer.writeFieldSize(0, 4)

		writer.writeFieldSize(1, this.body.bytes.byteLength)
		writer.appendBytes(this.body.bytes)

		return writer.bytes
	}

	public bytesWithLengthPrefix(): Uint8Array {
		const writer = new NanoBufWriter(12 + 4, true)
		writer.writeTypeId(879254966)

		writer.appendUint32(this.id)
		writer.writeFieldSize(0, 4)

		writer.writeFieldSize(1, this.body.bytes.byteLength)
		writer.appendBytes(this.body.bytes)

		writer.writeLengthPrefix(writer.currentSize - 4)

		return writer.bytes
	}
}

export { Request }
